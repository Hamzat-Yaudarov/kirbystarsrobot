import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import { Add, Edit, Delete, ToggleOn, ToggleOff } from '@mui/icons-material'
import { channelsApi } from '../services/api'

interface Channel {
  id: string
  –Ω–∞–∑–≤–∞–Ω–∏–µ: string
  chatId: string
  —Å—Å—ã–ª–∫–∞?: string
  –∞–∫—Ç–∏–≤–µ–Ω: boolean
}

const Channels: React.FC = () => {
  const [channels, setChannels] = useState<Channel[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingChannel, setEditingChannel] = useState<Channel | null>(null)
  const [formData, setFormData] = useState({
    –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
    chatId: '',
    —Å—Å—ã–ª–∫–∞: '',
  })

  useEffect(() => {
    loadChannels()
  }, [])

  const loadChannels = async () => {
    try {
      setLoading(true)
      const response = await channelsApi.getChannels()
      setChannels(response.data)
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingChannel(null)
    setFormData({ –Ω–∞–∑–≤–∞–Ω–∏–µ: '', chatId: '', —Å—Å—ã–ª–∫–∞: '' })
    setDialogOpen(true)
  }

  const handleEdit = (channel: Channel) => {
    setEditingChannel(channel)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: channel.–Ω–∞–∑–≤–∞–Ω–∏–µ,
      chatId: channel.chatId,
      —Å—Å—ã–ª–∫–∞: channel.—Å—Å—ã–ª–∫–∞ || '',
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –Ω–∞–∑–≤–∞–Ω–∏–µ: formData.–Ω–∞–∑–≤–∞–Ω–∏–µ,
        chatId: formData.chatId,
        —Å—Å—ã–ª–∫–∞: formData.—Å—Å—ã–ª–∫–∞ || null,
      }

      if (editingChannel) {
        await channelsApi.updateChannel(editingChannel.id, data)
      } else {
        await channelsApi.createChannel(data)
      }

      setDialogOpen(false)
      loadChannels()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error)
    }
  }

  const handleDelete = async (channel: Channel) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª "${channel.–Ω–∞–∑–≤–∞–Ω–∏–µ}"?`)) {
      try {
        await channelsApi.deleteChannel(channel.id)
        loadChannels()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error)
      }
    }
  }

  const handleToggle = async (channel: Channel) => {
    try {
      await channelsApi.toggleChannel(channel.id)
      loadChannels()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞:', error)
    }
  }

  const columns: GridColDef[] = [
    { field: '–Ω–∞–∑–≤–∞–Ω–∏–µ', headerName: '–ù–∞–∑–≤–∞–Ω–∏–µ', width: 200 },
    {
      field: 'chatId',
      headerName: 'Chat ID',
      width: 200,
      renderCell: (params) => (
        <Typography variant="body2" fontFamily="monospace">
          {params.value}
        </Typography>
      ),
    },
    {
      field: '—Å—Å—ã–ª–∫–∞',
      headerName: '–°—Å—ã–ª–∫–∞',
      width: 250,
      renderCell: (params) => params.value ? (
        <a href={params.value} target="_blank" rel="noopener noreferrer">
          {params.value}
        </a>
      ) : '‚Äî',
    },
    {
      field: '–∞–∫—Ç–∏–≤–µ–Ω',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        <GridActionsCellItem
          icon={<Edit />}
          label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          onClick={() => handleEdit(params.row)}
        />,
        <GridActionsCellItem
          icon={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? <ToggleOff /> : <ToggleOn />}
          label={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          onClick={() => handleToggle(params.row)}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">üì∫ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</Typography>
        <Button variant="contained" startIcon={<Add />} onClick={handleCreate}>
          –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Alert severity="info" sx={{ mb: 2 }}>
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
      </Alert>

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={channels}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50]}
          initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
        />
      </Box>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingChannel ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª' : '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"
              value={formData.–Ω–∞–∑–≤–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–∑–≤–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Chat ID"
              value={formData.chatId}
              onChange={(e) => setFormData({ ...formData, chatId: e.target.value })}
              sx={{ mb: 2 }}
              helperText="–ù–∞–ø—Ä–∏–º–µ—Ä: @channel –∏–ª–∏ -1001234567890"
            />
            <TextField
              fullWidth
              label="–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={formData.—Å—Å—ã–ª–∫–∞}
              onChange={(e) => setFormData({ ...formData, —Å—Å—ã–ª–∫–∞: e.target.value })}
              helperText="–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç—ã–π"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–Ω–∞–∑–≤–∞–Ω–∏–µ || !formData.chatId}
          >
            {editingChannel ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Channels
