import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import {
  Add,
  Edit,
  Delete,
  ToggleOn,
  ToggleOff,
} from '@mui/icons-material'
import { tasksApi } from '../services/api'

interface Task {
  id: string
  –Ω–∞–∑–≤–∞–Ω–∏–µ: string
  –æ–ø–∏—Å–∞–Ω–∏–µ: string
  –Ω–∞–≥—Ä–∞–¥–∞: number
  —Ç–∏–ø: string
  —Å—Å—ã–ª–∫–∞: string
  chatId?: string
  –ø–æ—Ä—è–¥–æ–∫: number
  –∞–∫—Ç–∏–≤–Ω–æ: boolean
  –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: number
  –¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: string
}

const Tasks: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingTask, setEditingTask] = useState<Task | null>(null)
  const [formData, setFormData] = useState({
    –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
    –æ–ø–∏—Å–∞–Ω–∏–µ: '',
    –Ω–∞–≥—Ä–∞–¥–∞: '',
    —Ç–∏–ø: 'channel',
    —Å—Å—ã–ª–∫–∞: '',
    chatId: '',
    –ø–æ—Ä—è–¥–æ–∫: '',
  })

  useEffect(() => {
    loadTasks()
  }, [])

  const loadTasks = async () => {
    try {
      setLoading(true)
      setError('')
      const response = await tasksApi.getTasks()
      setTasks(response.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingTask(null)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
      –æ–ø–∏—Å–∞–Ω–∏–µ: '',
      –Ω–∞–≥—Ä–∞–¥–∞: '',
      —Ç–∏–ø: 'channel',
      —Å—Å—ã–ª–∫–∞: '',
      chatId: '',
      –ø–æ—Ä—è–¥–æ–∫: '0',
    })
    setDialogOpen(true)
  }

  const handleEdit = (task: Task) => {
    setEditingTask(task)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: task.–Ω–∞–∑–≤–∞–Ω–∏–µ,
      –æ–ø–∏—Å–∞–Ω–∏–µ: task.–æ–ø–∏—Å–∞–Ω–∏–µ,
      –Ω–∞–≥—Ä–∞–¥–∞: task.–Ω–∞–≥—Ä–∞–¥–∞.toString(),
      —Ç–∏–ø: task.—Ç–∏ÔøΩÔøΩ,
      —Å—Å—ã–ª–∫–∞: task.—Å—Å—ã–ª–∫–∞,
      chatId: task.chatId || '',
      –ø–æ—Ä—è–¥–æ–∫: task.–ø–æ—Ä—è–¥–æ–∫.toString(),
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –Ω–∞–∑–≤–∞–Ω–∏–µ: formData.–Ω–∞–∑–≤–∞–Ω–∏–µ,
        –æ–ø–∏—Å–∞–Ω–∏–µ: formData.–æ–ø–∏—Å–∞–Ω–∏–µ,
        –Ω–∞–≥—Ä–∞–¥–∞: parseFloat(formData.–Ω–∞–≥—Ä–∞–¥–∞),
        —Ç–∏–ø: formData.—Ç–∏–ø,
        —Å—Å—ã–ª–∫–∞: formData.—Å—Å—ã–ª–∫–∞,
        chatId: formData.chatId || null,
        –ø–æ—Ä—è–¥–æ–∫: parseInt(formData.–ø–æ—Ä—è–¥–æ–∫) || 0,
      }

      if (editingTask) {
        await tasksApi.updateTask(editingTask.id, data)
      } else {
        await tasksApi.createTask(data)
      }

      setDialogOpen(false)
      loadTasks()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error)
    }
  }

  const handleDelete = async (task: Task) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ "${task.–Ω–∞–∑–≤–∞–Ω–∏–µ}"?`)) {
      try {
        await tasksApi.deleteTask(task.id)
        loadTasks()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error)
      }
    }
  }

  const handleToggle = async (task: Task) => {
    try {
      await tasksApi.toggleTask(task.id)
      loadTasks()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
    }
  }

  const getTaskTypeLabel = (type: string) => {
    const types: { [key: string]: string } = {
      channel: '–ö–∞–Ω–∞–ª',
      chat: '–ß–∞—Ç',
      bot: '–ë–æ—Ç',
    }
    return types[type] || type
  }

  const columns: GridColDef[] = [
    {
      field: '–Ω–∞–∑–≤–∞–Ω–∏–µ',
      headerName: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      width: 200,
    },
    {
      field: '–æ–ø–∏—Å–∞–Ω–∏–µ',
      headerName: '–û–ø–∏—Å–∞–Ω–∏–µ',
      width: 250,
      renderCell: (params) => (
        <Typography
          variant="body2"
          sx={{
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
          }}
        >
          {params.value}
        </Typography>
      ),
    },
    {
      field: '—Ç–∏–ø',
      headerName: '–¢–∏–ø',
      width: 100,
      renderCell: (params) => (
        <Chip label={getTaskTypeLabel(params.value)} size="small" />
      ),
    },
    {
      field: '–Ω–∞–≥—Ä–∞–¥–∞',
      headerName: '–ù–∞–≥—Ä–∞–¥–∞ ‚≠ê',
      width: 120,
      type: 'number',
    },
    {
      field: '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      headerName: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      width: 100,
      type: 'number',
    },
    {
      field: '–ø–æ—Ä—è–¥–æ–∫',
      headerName: '–ü–æ—Ä—è–¥–æ–∫',
      width: 100,
      type: 'number',
    },
    {
      field: '–∞–∫—Ç–∏–≤–Ω–æ',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: '–¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è',
      headerName: '–°–æ–∑–¥–∞–Ω–æ',
      width: 120,
      valueFormatter: (params) => new Date(params.value).toLocaleDateString('ru-RU'),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        <GridActionsCellItem
          icon={<Edit />}
          label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          onClick={() => handleEdit(params.row)}
        />,
        <GridActionsCellItem
          icon={params.row.–∞–∫—Ç–∏–≤–Ω–æ ? <ToggleOff /> : <ToggleOn />}
          label={params.row.–∞–∫—Ç–∏–≤–Ω–æ ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          onClick={() => handleToggle(params.row)}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">
          üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
        </Typography>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleCreate}
        >
          –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={tasks}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50, 100]}
          initialState={{
            pagination: { paginationModel: { pageSize: 25 } },
          }}
          disableRowSelectionOnClick
        />
      </Box>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingTask ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
              value={formData.–Ω–∞–∑–≤–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–∑–≤–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              multiline
              rows={3}
              value={formData.–æ–ø–∏—Å–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –æ–ø–∏—Å–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–ù–∞–≥—Ä–∞–¥–∞ (–∑–≤—ë–∑–¥—ã)"
              type="number"
              value={formData.–Ω–∞–≥—Ä–∞–¥–∞}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–≥—Ä–∞–¥–∞: e.target.value })}
              sx={{ mb: 2 }}
            />
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è</InputLabel>
              <Select
                value={formData.—Ç–∏–ø}
                label="–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è"
                onChange={(e) => setFormData({ ...formData, —Ç–∏–ø: e.target.value })}
              >
                <MenuItem value="channel">–ö–∞–Ω–∞–ª</MenuItem>
                <MenuItem value="chat">–ß–∞—Ç</MenuItem>
                <MenuItem value="bot">–ë–æ—Ç</MenuItem>
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="–°—Å—ã–ª–∫–∞"
              value={formData.—Å—Å—ã–ª–∫–∞}
              onChange={(e) => setFormData({ ...formData, —Å—Å—ã–ª–∫–∞: e.target.value })}
              sx={{ mb: 2 }}
              helperText="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç/–±–æ—Ç–∞"
            />
            <TextField
              fullWidth
              label="Chat ID (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)"
              value={formData.chatId}
              onChange={(e) => setFormData({ ...formData, chatId: e.target.value })}
              sx={{ mb: 2 }}
              helperText="–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel –∏–ª–∏ -1001234567890)"
            />
            <TextField
              fullWidth
              label="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
              type="number"
              value={formData.–ø–æ—Ä—è–¥–æ–∫}
              onChange={(e) => setFormData({ ...formData, –ø–æ—Ä—è–¥–æ–∫: e.target.value })}
              helperText="–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º —Ä–∞–Ω—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–Ω–∞–∑–≤–∞–Ω–∏–µ || !formData.–æ–ø–∏—Å–∞–Ω–∏–µ || !formData.–Ω–∞–≥—Ä–∞–¥–∞ || !formData.—Å—Å—ã–ª–∫–∞}
          >
            {editingTask ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Tasks
