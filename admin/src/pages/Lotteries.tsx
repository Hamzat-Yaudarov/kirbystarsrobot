import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControlLabel,
  Switch,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import { Add, Edit, Delete, EmojiEvents, Stop } from '@mui/icons-material'
import { lotteriesApi } from '../services/api'

interface Lottery {
  id: string
  –Ω–∞–∑–≤–∞–Ω–∏–µ: string
  —Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞: number
  –≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤: number
  –ø—Ä–æ–¥–∞–Ω–æ–ë–∏–ª–µ—Ç–æ–≤: number
  –∫–æ–º–∏—Å—Å–∏—è: number
  –ø—Ä–∏–∑–æ–≤–æ–π–§–æ–Ω–¥: number
  –∞–∫—Ç–∏–≤–Ω–∞: boolean
  –∞–≤—Ç–æ–í—ã–±–æ—Ä: boolean
  –¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è?: string
  –ø–æ–±–µ–¥–∏—Ç–µ–ª—å–í—ã–±—Ä–∞–Ω: boolean
  —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: number
}

const Lotteries: React.FC = () => {
  const [lotteries, setLotteries] = useState<Lottery[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingLottery, setEditingLottery] = useState<Lottery | null>(null)
  const [formData, setFormData] = useState({
    –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
    –æ–ø–∏—Å–∞–Ω–∏–µ: '',
    —Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞: '',
    –≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤: '',
    –∫–æ–º–∏—Å—Å–∏—è: '',
    –∞–≤—Ç–æ–í—ã–±–æ—Ä: true,
    –¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è: '',
  })

  useEffect(() => {
    loadLotteries()
  }, [])

  const loadLotteries = async () => {
    try {
      setLoading(true)
      const response = await lotteriesApi.getLotteries()
      setLotteries(response.data)
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingLottery(null)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
      –æ–ø–∏—Å–∞–Ω–∏–µ: '',
      —Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞: '',
      –≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤: '',
      –∫–æ–º–∏—Å—Å–∏—è: '10',
      –∞–≤ÔøΩÔøΩ–æ–í—ã–±–æ—Ä: true,
      –¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è: '',
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –Ω–∞–∑–≤–∞–Ω–∏–µ: formData.–Ω–∞–∑–≤–∞–Ω–∏–µ,
        –æ–ø–∏—Å–∞–Ω–∏–µ: formData.–æ–ø–∏—Å–∞–Ω–∏–µ,
        —Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞: parseFloat(formData.—Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞),
        –≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤: parseInt(formData.–≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤),
        –∫–æ–º–∏—Å—Å–∏—è: parseFloat(formData.–∫–æ–º–∏—Å—Å–∏—è),
        –∞–≤—Ç–æ–í—ã–±–æ—Ä: formData.–∞–≤—Ç–æ–í—ã–±–æ—Ä,
        –¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è: formData.–¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è || null,
      }

      await lotteriesApi.createLottery(data)
      setDialogOpen(false)
      loadLotteries()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:', error)
    }
  }

  const handleFinish = async (lottery: Lottery) => {
    if (window.confirm(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é "${lottery.–Ω–∞–∑–≤–∞–Ω–∏–µ}"?`)) {
      try {
        await lotteriesApi.finishLottery(lottery.id)
        loadLotteries()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:', error)
      }
    }
  }

  const handleDelete = async (lottery: Lottery) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é "${lottery.–Ω–∞–∑–≤–∞–Ω–∏–µ}"? –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.`)) {
      try {
        await lotteriesApi.deleteLottery(lottery.id)
        loadLotteries()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:', error)
      }
    }
  }

  const columns: GridColDef[] = [
    { field: '–Ω–∞–∑–≤–∞–Ω–∏–µ', headerName: '–ù–∞–∑–≤–∞–Ω–∏–µ', width: 200 },
    { field: '—Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞', headerName: '–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ‚≠ê', width: 140, type: 'number' },
    { field: '–≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤', headerName: '–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤', width: 120, type: 'number' },
    { field: '–ø—Ä–æ–¥–∞–Ω–æ–ë–∏–ª–µ—Ç–æ–≤', headerName: '–ü—Ä–æ–¥–∞–Ω–æ', width: 100, type: 'number' },
    { field: '–ø—Ä–∏–∑–æ–≤–æ–π–§–æ–Ω–¥', headerName: '–ü—Ä–∏–∑ ‚≠ê', width: 120, type: 'number' },
    { field: '–∫–æ–º–∏—Å—Å–∏—è', headerName: '–ö–æ–º–∏—Å—Å–∏—è %', width: 120, type: 'number' },
    {
      field: '–∞–∫—Ç–∏–≤–Ω–∞',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.row.–ø–æ–±–µ–¥–∏—Ç–µ–ª—å–í—ã–±—Ä–∞–Ω ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : params.value ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
          color={params.row.–ø–æ–±–µ–¥–∏—Ç–µ–ª—å–í—ã–±—Ä–∞–Ω ? 'default' : params.value ? 'success' : 'warning'}
          size="small"
        />
      ),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 150,
      getActions: (params: GridRowParams) => [
        ...(params.row.–∞–∫—Ç–∏–≤–Ω–∞ && !params.row.–ø–æ–±–µ–¥–∏—Ç–µ–ª—å–í—ã–±—Ä–∞–Ω ? [
          <GridActionsCellItem
            icon={<EmojiEvents />}
            label="–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            onClick={() => handleFinish(params.row)}
          />
        ] : []),
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏</Typography>
        <Button variant="contained" startIcon={<Add />} onClick={handleCreate}>
          –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={lotteries}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50]}
          initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
        />
      </Box>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>–°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ"
              value={formData.–Ω–∞–∑–≤–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–∑–≤–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              multiline
              rows={3}
              value={formData.–æ–ø–∏—Å–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –æ–ø–∏—Å–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ (–∑–≤—ë–∑–¥—ã)"
              type="number"
              value={formData.—Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞}
              onChange={(e) => setFormData({ ...formData, —Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"
              type="number"
              value={formData.–≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤}
              onChange={(e) => setFormData({ ...formData, –≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–ö–æ–º–∏—Å—Å–∏—è (%)"
              type="number"
              value={formData.–∫–æ–º–∏—Å—Å–∏—è}
              onChange={(e) => setFormData({ ...formData, –∫–æ–º–∏—Å—Å–∏—è: e.target.value })}
              sx={{ mb: 2 }}
            />
            <FormControlLabel
              control={
                <Switch
                  checked={formData.–∞–≤—Ç–æ–í—ã–±–æ—Ä}
                  onChange={(e) => setFormData({ ...formData, –∞–≤—Ç–æ–í—ã–±–æ—Ä: e.target.checked })}
                />
              }
              label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–Ω–∞–∑–≤–∞–Ω–∏–µ || !formData.–æ–ø–∏—Å–∞–Ω–∏–µ || !formData.—Ü–µ–Ω–∞–ë–∏–ª–µ—Ç–∞ || !formData.–≤—Å–µ–≥–æ–ë–∏–ª–µ—Ç–æ–≤}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Lotteries
