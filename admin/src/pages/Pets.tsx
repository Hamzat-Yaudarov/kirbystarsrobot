import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import { Add, Edit, Delete, ToggleOn, ToggleOff } from '@mui/icons-material'
import { petsApi } from '../services/api'

interface Pet {
  id: string
  –Ω–∞–∑–≤–∞–Ω–∏–µ: string
  –æ–ø–∏—Å–∞–Ω–∏–µ: string
  —Ü–µ–Ω–∞: number
  —Ç–∏–ø–ë—É—Å—Ç–∞: string
  –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: number
  –∫–∞—Ä—Ç–∏–Ω–∫–∞?: string
  –∞–∫—Ç–∏–≤–µ–Ω: boolean
  –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: number
  –¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: string
}

const Pets: React.FC = () => {
  const [pets, setPets] = useState<Pet[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingPet, setEditingPet] = useState<Pet | null>(null)
  const [formData, setFormData] = useState({
    –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
    –æ–ø–∏—Å–∞–Ω–∏–µ: '',
    —Ü–µ–Ω–∞: '',
    —Ç–∏–ø–ë—É—Å—Ç–∞: 'click',
    –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: '',
    –∫–∞—Ä—Ç–∏–Ω–∫–∞: '',
  })

  const boostTypes = {
    click: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∫–ª–∏–∫–æ–≤',
    referral1: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1 —É—Ä–æ–≤–Ω—è',
    referral2: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2 —É—Ä–æ–≤–Ω—è',
    task: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∑–∞–¥–∞–Ω–∏–π',
  }

  useEffect(() => {
    loadPets()
  }, [])

  const loadPets = async () => {
    try {
      setLoading(true)
      const response = await petsApi.getPets()
      setPets(response.data)
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingPet(null)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: '',
      –æ–ø–∏—Å–∞–Ω–∏–µ: '',
      —Ü–µ–Ω–∞: '',
      —Ç–∏–ø–ë—É—Å—Ç–∞: 'click',
      –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: '',
      –∫–∞—Ä—Ç–∏–Ω–∫–∞: '',
    })
    setDialogOpen(true)
  }

  const handleEdit = (pet: Pet) => {
    setEditingPet(pet)
    setFormData({
      –Ω–∞–∑–≤–∞–Ω–∏–µ: pet.–Ω–∞–∑–≤–∞–Ω–∏–µ,
      –æ–ø–∏—Å–∞–Ω–∏–µ: pet.–æ–ø–∏—Å–∞–Ω–∏–µ,
      —Ü–µ–Ω–∞: pet.—Ü–µ–Ω–∞.toString(),
      —Ç–∏–ø–ë—É—Å—Ç–∞: pet.—Ç–∏–ø–ë—É—Å—Ç–∞,
      –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: pet.–∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞.toString(),
      –∫–∞—Ä—Ç–∏–Ω–∫–∞: pet.–∫–∞—Ä—Ç–∏–Ω–∫–∞ || '',
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –Ω–∞–∑–≤–∞–Ω–∏–µ: formData.–Ω–∞–∑–≤–∞–Ω–∏–µ,
        –æ–ø–∏—Å–∞–Ω–∏–µ: formData.–æ–ø–∏—Å–∞–Ω–∏–µ,
        —Ü–µ–Ω–∞: parseFloat(formData.—Ü–µ–Ω–∞),
        —Ç–∏–ø–ë—É—Å—Ç–∞: formData.—Ç–∏–ø–ë—É—Å—Ç–∞,
        –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: parseFloat(formData.–∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞),
        –∫–∞—Ä—Ç–∏–Ω–∫–∞: formData.–∫–∞—Ä—Ç–∏–Ω–∫–∞ || null,
      }

      if (editingPet) {
        await petsApi.updatePet(editingPet.id, data)
      } else {
        await petsApi.createPet(data)
      }

      setDialogOpen(false)
      loadPets()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', error)
    }
  }

  const handleDelete = async (pet: Pet) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ "${pet.–Ω–∞–∑–≤–∞–Ω–∏–µ}"?`)) {
      try {
        await petsApi.deletePet(pet.id)
        loadPets()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', error)
      }
    }
  }

  const handleToggle = async (pet: Pet) => {
    try {
      await petsApi.togglePet(pet.id)
      loadPets()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞:', error)
    }
  }

  const columns: GridColDef[] = [
    { field: '–Ω–∞–∑–≤–∞–Ω–∏–µ', headerName: '–ù–∞–∑–≤–∞–Ω–∏–µ', width: 150 },
    { field: '–æ–ø–∏—Å–∞–Ω–∏–µ', headerName: '–û–ø–∏—Å–∞–Ω–∏–µ', width: 250 },
    { field: '—Ü–µ–Ω–∞', headerName: '–¶–µ–Ω–∞ ‚≠ê', width: 100, type: 'number' },
    {
      field: '—Ç–∏–ø–ë—É—Å—Ç–∞',
      headerName: '–¢–∏–ø –±—É—Å—Ç–∞',
      width: 150,
      renderCell: (params) => (
        <Chip label={boostTypes[params.value as keyof typeof boostTypes]} size="small" />
      ),
    },
    { field: '–∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞', headerName: '–ë—É—Å—Ç', width: 100, type: 'number' },
    { field: '–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', headerName: '–í–ª–∞–¥–µ–ª—å—Ü–µ–≤', width: 100, type: 'number' },
    {
      field: '–∞–∫—Ç–∏–≤–µ–Ω',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        <GridActionsCellItem
          icon={<Edit />}
          label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          onClick={() => handleEdit(params.row)}
        />,
        <GridActionsCellItem
          icon={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? <ToggleOff /> : <ToggleOn />}
          label={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          onClick={() => handleToggle(params.row)}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">üêæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞–º–∏</Typography>
        <Button variant="contained" startIcon={<Add />} onClick={handleCreate}>
          –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={pets}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50]}
          initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
        />
      </Box>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingPet ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞' : '–°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ"
              value={formData.–Ω–∞–∑–≤–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–∑–≤–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              multiline
              rows={3}
              value={formData.–æ–ø–∏—Å–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, –æ–ø–∏—Å–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–¶–µ–Ω–∞ (–∑–≤—ë–∑–¥—ã)"
              type="number"
              value={formData.—Ü–µ–Ω–∞}
              onChange={(e) => setFormData({ ...formData, —Ü–µ–Ω–∞: e.target.value })}
              sx={{ mb: 2 }}
            />
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>–¢–∏–ø –±—É—Å—Ç–∞</InputLabel>
              <Select
                value={formData.—Ç–∏–ø–ë—É—Å—Ç–∞}
                label="–¢–∏–ø –±—É—Å—Ç–∞"
                onChange={(e) => setFormData({ ...formData, —Ç–∏–ø–ë—É—Å—Ç–∞: e.target.value })}
              >
                {Object.entries(boostTypes).map(([key, label]) => (
                  <MenuItem key={key} value={key}>{label}</MenuItem>
                ))}
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="–ó–Ω–∞—á–µ–Ω–∏–µ –±—É—Å—Ç–∞"
              type="number"
              step="0.01"
              value={formData.–∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞}
              onChange={(e) => setFormData({ ...formData, –∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={formData.–∫–∞—Ä—Ç–∏–Ω–∫–∞}
              onChange={(e) => setFormData({ ...formData, –∫–∞—Ä—Ç–∏–Ω–∫–∞: e.target.value })}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–Ω–∞–∑–≤–∞–Ω–∏–µ || !formData.–æ–ø–∏—Å–∞–Ω–∏–µ || !formData.—Ü–µ–Ω–∞ || !formData.–∑–Ω–∞—á–µ–Ω–∏–µ–ë—É—Å—Ç–∞}
          >
            {editingPet ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Pets
