import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Switch,
  FormControlLabel,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import {
  Add,
  Edit,
  Delete,
  Visibility,
  ToggleOn,
  ToggleOff,
} from '@mui/icons-material'
import { promocodesApi } from '../services/api'

interface Promocode {
  id: string
  –∫–æ–¥: string
  –Ω–∞–≥—Ä–∞–¥–∞: number
  –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π?: number
  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: number
  –∞–∫—Ç–∏–≤–µ–Ω: boolean
  –¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: string
  –æ—Å—Ç–∞—Ç–æ–∫–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π?: number
}

const Promocodes: React.FC = () => {
  const [promocodes, setPromocodes] = useState<Promocode[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingPromocode, setEditingPromocode] = useState<Promocode | null>(null)
  const [formData, setFormData] = useState({
    –∫–æ–¥: '',
    –Ω–∞–≥—Ä–∞–¥–∞: '',
    –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: '',
  })

  useEffect(() => {
    loadPromocodes()
  }, [])

  const loadPromocodes = async () => {
    try {
      setLoading(true)
      setError('')
      const response = await promocodesApi.getPromocodes()
      setPromocodes(response.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingPromocode(null)
    setFormData({ –∫–æ–¥: '', –Ω–∞–≥—Ä–∞–¥–∞: '', –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: '' })
    setDialogOpen(true)
  }

  const handleEdit = (promocode: Promocode) => {
    setEditingPromocode(promocode)
    setFormData({
      –∫–æ–¥: promocode.–∫–æ–¥,
      –Ω–∞–≥—Ä–∞–¥–∞: promocode.–Ω–∞–≥—Ä–∞–¥–∞.toString(),
      –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: promocode.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π?.toString() || '',
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –∫–æ–¥: formData.–∫–æ–¥,
        –Ω–∞–≥—Ä–∞–¥–∞: parseFloat(formData.–Ω–∞–≥—Ä–∞–¥–∞),
        –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: formData.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 
          ? parseInt(formData.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π) 
          : null,
      }

      if (editingPromocode) {
        await promocodesApi.updatePromocode(editingPromocode.id, data)
      } else {
        await promocodesApi.createPromocode(data)
      }

      setDialogOpen(false)
      loadPromocodes()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
    }
  }

  const handleDelete = async (promocode: Promocode) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ${promocode.–∫–æ–¥}?`)) {
      try {
        await promocodesApi.deletePromocode(promocode.id)
        loadPromocodes()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
      }
    }
  }

  const handleToggle = async (promocode: Promocode) => {
    try {
      await promocodesApi.togglePromocode(promocode.id)
      loadPromocodes()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
    }
  }

  const columns: GridColDef[] = [
    {
      field: '–∫–æ–¥',
      headerName: '–ü—Ä–æ–º–æ–∫–æ–¥',
      width: 150,
      renderCell: (params) => (
        <Typography variant="body2" fontFamily="monospace">
          {params.value}
        </Typography>
      ),
    },
    {
      field: '–Ω–∞–≥—Ä–∞–¥–∞',
      headerName: '–ù–∞–≥—Ä–∞–¥–∞ ‚≠ê',
      width: 120,
      type: 'number',
    },
    {
      field: '–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π',
      headerName: '–õ–∏–º–∏—Ç',
      width: 100,
      renderCell: (params) => params.value || '‚àû',
    },
    {
      field: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ',
      headerName: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ',
      width: 120,
      type: 'number',
    },
    {
      field: '–æ—Å—Ç–∞—Ç–æ–∫–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π',
      headerName: '–û—Å—Ç–∞–ª–æ—Å—å',
      width: 100,
      renderCell: (params) => {
        if (params.row.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π) {
          const –æ—Å—Ç–∞—Ç–æ–∫ = params.row.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π - params.row.–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
          return –æ—Å—Ç–∞—Ç–æ–∫ > 0 ? –æ—Å—Ç–∞—Ç–æ–∫ : 0
        }
        return '‚àû'
      },
    },
    {
      field: '–∞–∫—Ç–∏–≤–µ–Ω',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: '–¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è',
      headerName: '–°–æ–∑–¥–∞–Ω',
      width: 120,
      valueFormatter: (params) => new Date(params.value).toLocaleDateString('ru-RU'),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        <GridActionsCellItem
          icon={<Edit />}
          label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          onClick={() => handleEdit(params.row)}
        />,
        <GridActionsCellItem
          icon={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? <ToggleOff /> : <ToggleOn />}
          label={params.row.–∞–∫—Ç–∏–≤–µ–Ω ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          onClick={() => handleToggle(params.row)}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">
          üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        </Typography>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleCreate}
        >
          –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={promocodes}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50, 100]}
          initialState={{
            pagination: { paginationModel: { pageSize: 25 } },
          }}
          disableRowSelectionOnClick
        />
      </Box>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingPromocode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"
              value={formData.–∫–æ–¥}
              onChange={(e) => setFormData({ ...formData, –∫–æ–¥: e.target.value.toUpperCase() })}
              sx={{ mb: 2 }}
              helperText="–õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã"
            />
            <TextField
              fullWidth
              label="–ù–∞–≥—Ä–∞–¥–∞ (–∑–≤—ë–∑–¥—ã)"
              type="number"
              value={formData.–Ω–∞–≥—Ä–∞–¥–∞}
              onChange={(e) => setFormData({ ...formData, –Ω–∞–≥—Ä–∞–¥–∞: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
              type="number"
              value={formData.–ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π}
              onChange={(e) => setFormData({ ...formData, –ª–∏–º–∏—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: e.target.value })}
              helperText="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–∫–æ–¥ || !formData.–Ω–∞–≥—Ä–∞–¥–∞}
          >
            {editingPromocode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Promocodes
