import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Chip,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import { Add, Edit, Delete, Send } from '@mui/icons-material'
import { broadcastsApi } from '../services/api'

interface Broadcast {
  id: string
  –∑–∞–≥–æ–ª–æ–≤–æ–∫: string
  —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: string
  –∫–Ω–æ–ø–∫–∏?: any
  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: boolean
  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π: number
  –¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: string
  –¥–∞—Ç–∞–û—Ç–ø—Ä–∞–≤–∫–∏?: string
}

const Broadcasts: React.FC = () => {
  const [broadcasts, setBroadcasts] = useState<Broadcast[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingBroadcast, setEditingBroadcast] = useState<Broadcast | null>(null)
  const [formData, setFormData] = useState({
    –∑–∞–≥–æ–ª–æ–≤–æ–∫: '',
    —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: '',
    –∫–Ω–æ–ø–∫–∏: '',
  })

  useEffect(() => {
    loadBroadcasts()
  }, [])

  const loadBroadcasts = async () => {
    try {
      setLoading(true)
      const response = await broadcastsApi.getBroadcasts()
      setBroadcasts(response.data)
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫')
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingBroadcast(null)
    setFormData({
      –∑–∞–≥–æ–ª–æ–≤–æ–∫: '',
      —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: '',
      –∫–Ω–æ–ø–∫–∏: '',
    })
    setDialogOpen(true)
  }

  const handleEdit = (broadcast: Broadcast) => {
    setEditingBroadcast(broadcast)
    setFormData({
      –∑–∞–≥–æ–ª–æ–≤–æ–∫: broadcast.–∑–∞–≥–æ–ª–æ–≤–æ–∫,
      —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: broadcast.—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ,
      –∫–Ω–æ–ø–∫–∏: broadcast.–∫–Ω–æ–ø–∫–∏ ? JSON.stringify(broadcast.–∫–Ω–æ–ø–∫–∏, null, 2) : '',
    })
    setDialogOpen(true)
  }

  const handleSave = async () => {
    try {
      const data = {
        –∑–∞–≥–æ–ª–æ–≤–æ–∫: formData.–∑–∞–≥–æ–ª–æ–≤–æ–∫,
        —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: formData.—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ,
        –∫–Ω–æ–ø–∫–∏: formData.–∫–Ω–æ–ø–∫–∏ || null,
      }

      if (editingBroadcast) {
        await broadcastsApi.updateBroadcast(editingBroadcast.id, data)
      } else {
        await broadcastsApi.createBroadcast(data)
      }

      setDialogOpen(false)
      loadBroadcasts()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
    }
  }

  const handleSend = async (broadcast: Broadcast) => {
    if (window.confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É "${broadcast.–∑–∞–≥–æ–ª–æ–≤–æ–∫}" –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?`)) {
      try {
        await broadcastsApi.sendBroadcast(broadcast.id)
        loadBroadcasts()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
      }
    }
  }

  const handleDelete = async (broadcast: Broadcast) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É "${broadcast.–∑–∞–≥–æ–ª–æ–≤–æ–∫}"?`)) {
      try {
        await broadcastsApi.deleteBroadcast(broadcast.id)
        loadBroadcasts()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
      }
    }
  }

  const columns: GridColDef[] = [
    { field: '–∑–∞–≥–æ–ª–æ–≤–æ–∫', headerName: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', width: 200 },
    {
      field: '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
      headerName: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
      width: 300,
      renderCell: (params) => (
        <Typography
          variant="body2"
          sx={{
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
          }}
        >
          {params.value}
        </Typography>
      ),
    },
    {
      field: '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π',
      headerName: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      width: 120,
      type: 'number',
    },
    {
      field: '–¥–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è',
      headerName: '–°–æ–∑–¥–∞–Ω–∞',
      width: 120,
      valueFormatter: (params) => new Date(params.value).toLocaleDateString('ru-RU'),
    },
    {
      field: '–¥–∞—Ç–∞–û—Ç–ø—Ä–∞–≤–∫–∏',
      headerName: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      width: 120,
      renderCell: (params) => params.value 
        ? new Date(params.value).toLocaleDateString('ru-RU')
        : '‚Äî',
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        ...(!params.row.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ? [
          <GridActionsCellItem
            icon={<Edit />}
            label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            onClick={() => handleEdit(params.row)}
          />,
          <GridActionsCellItem
            icon={<Send />}
            label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            onClick={() => handleSend(params.row)}
          />,
        ] : []),
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDelete(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</Typography>
        <Button variant="contained" startIcon={<Add />} onClick={handleCreate}>
          –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={broadcasts}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50]}
          initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
        />
      </Box>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingBroadcast ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' : '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
              value={formData.–∑–∞–≥–æ–ª–æ–≤–æ–∫}
              onChange={(e) => setFormData({ ...formData, –∑–∞–≥–æ–ª–æ–≤–æ–∫: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
              multiline
              rows={6}
              value={formData.—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ}
              onChange={(e) => setFormData({ ...formData, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: e.target.value })}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="–ö–Ω–æ–ø–∫–∏ (JSON, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              multiline
              rows={4}
              value={formData.–∫–Ω–æ–ø–∫–∏}
              onChange={(e) => setFormData({ ...formData, –∫–Ω–æ–ø–∫–∏: e.target.value })}
              helperText='–ü—Ä–∏–º–µ—Ä: [[ {"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "action"} ]]'
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleSave}
            variant="contained"
            disabled={!formData.–∑–∞–≥–æ–ª–æ–≤–æ–∫ || !formData.—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ}
          >
            {editingBroadcast ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Broadcasts
