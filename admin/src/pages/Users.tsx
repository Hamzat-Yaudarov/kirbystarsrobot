import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Chip,
  Grid,
} from '@mui/material'
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
} from '@mui/x-data-grid'
import {
  Visibility,
  Block,
  Delete,
  AccountBalanceWallet,
  PersonOff,
  PersonAdd,
} from '@mui/icons-material'
import { usersApi } from '../services/api'

interface User {
  id: string
  telegramId: string
  –∏–º—è: string
  username?: string
  –±–∞–ª–∞–Ω—Å: number
  —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: number
  –∑–∞–¥–∞–Ω–∏–π–í—ã–ø–æ–ª–Ω–µ–Ω–æ: number
  –ø–∏—Ç–æ–º—Ü–µ–≤: number
  –∞–∫—Ç–∏–≤–µ–Ω: boolean
  –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: boolean
  –¥–∞—Ç–∞–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: string
  –ø–æ—Å–ª–µ–¥–Ω–∏–π–ö–ª–∏–∫?: string
  –∫–µ–π—Å–æ–≤–û—Ç–∫—Ä—ã—Ç–æ: number
  –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ–†–µ—Ñ–µ—Ä–∞–ª—ã: number
}

const Users: React.FC = () => {
  const [users, setUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [search, setSearch] = useState('')
  const [status, setStatus] = useState('–≤—Å–µ')
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  const [userDetailOpen, setUserDetailOpen] = useState(false)
  const [balanceDialogOpen, setBalanceDialogOpen] = useState(false)
  const [balanceAmount, setBalanceAmount] = useState('')
  const [balanceOperation, setBalanceOperation] = useState('–¥–æ–±–∞–≤–∏—Ç—å')

  useEffect(() => {
    loadUsers()
  }, [status, search])

  const loadUsers = async () => {
    try {
      setLoading(true)
      setError('')
      const params = {
        —Å—Ç–∞—Ç—É—Å: status,
        –ø–æ–∏—Å–∫: search,
        –ª–∏–º–∏—Ç: 100,
      }
      const response = await usersApi.getUsers(params)
      setUsers(response.data.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    } finally {
      setLoading(false)
    }
  }

  const handleViewUser = async (user: User) => {
    try {
      const response = await usersApi.getUser(user.id)
      setSelectedUser(response.data)
      setUserDetailOpen(true)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    }
  }

  const handleBanUser = async (user: User) => {
    try {
      if (user.–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω) {
        await usersApi.unbanUser(user.id)
      } else {
        await usersApi.banUser(user.id)
      }
      loadUsers()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    }
  }

  const handleDeleteUser = async (user: User) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.–∏–º—è}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) {
      try {
        await usersApi.deleteUser(user.id)
        loadUsers()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      }
    }
  }

  const handleBalanceUpdate = async () => {
    if (!selectedUser || !balanceAmount) return

    try {
      await usersApi.updateBalance(
        selectedUser.id,
        parseFloat(balanceAmount),
        balanceOperation
      )
      setBalanceDialogOpen(false)
      setBalanceAmount('')
      loadUsers()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error)
    }
  }

  const columns: GridColDef[] = [
    {
      field: '–∏–º—è',
      headerName: '–ò–º—è',
      width: 150,
      renderCell: (params) => (
        <Box>
          <Typography variant="body2">{params.value}</Typography>
          {params.row.username && (
            <Typography variant="caption" color="textSecondary">
              @{params.row.username}
            </Typography>
          )}
        </Box>
      ),
    },
    {
      field: 'telegramId',
      headerName: 'Telegram ID',
      width: 120,
    },
    {
      field: '–±–∞–ª–∞–Ω—Å',
      headerName: '–ë–∞–ª–∞–Ω—Å ‚≠ê',
      width: 100,
      type: 'number',
      valueFormatter: (params) => params.value.toFixed(2),
    },
    {
      field: '—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      headerName: '–†–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      width: 100,
      type: 'number',
    },
    {
      field: '–∑–∞–¥–∞–Ω–∏–π–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      headerName: '–ó–∞–¥–∞–Ω–∏–π',
      width: 100,
      type: 'number',
    },
    {
      field: '–ø–∏—Ç–æ–º—Ü–µ–≤',
      headerName: '–ü–∏—Ç–æ–º—Ü–µ–≤',
      width: 100,
      type: 'number',
    },
    {
      field: '—Å—Ç–∞—Ç—É—Å',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 120,
      renderCell: (params) => (
        <Box>
          {params.row.–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ? (
            <Chip label="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" color="error" size="small" />
          ) : params.row.–∞–∫—Ç–∏–≤–µ–Ω ? (
            <Chip label="–ê–∫—Ç–∏–≤–µ–Ω" color="success" size="small" />
          ) : (
            <Chip label="–ù–µ–∞–∫—Ç–∏–≤–µ–Ω" color="default" size="small" />
          )}
        </Box>
      ),
    },
    {
      field: '–¥–∞—Ç–∞–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      headerName: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      width: 120,
      valueFormatter: (params) => new Date(params.value).toLocaleDateString('ru-RU'),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 200,
      getActions: (params: GridRowParams) => [
        <GridActionsCellItem
          icon={<Visibility />}
          label="–ü—Ä–æ—Å–º–æ—Ç—Ä"
          onClick={() => handleViewUser(params.row)}
        />,
        <GridActionsCellItem
          icon={<AccountBalanceWallet />}
          label="–ë–∞–ª–∞–Ω—Å"
          onClick={() => {
            setSelectedUser(params.row)
            setBalanceDialogOpen(true)
          }}
        />,
        <GridActionsCellItem
          icon={params.row.–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ? <PersonAdd /> : <PersonOff />}
          label={params.row.–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
          onClick={() => handleBanUser(params.row)}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="–£–¥–∞–ª–∏—Ç—å"
          onClick={() => handleDeleteUser(params.row)}
        />,
      ],
    },
  ]

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      </Typography>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <TextField
            fullWidth
            label="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && loadUsers()}
          />
        </Grid>
        <Grid item xs={12} md={3}>
          <FormControl fullWidth>
            <InputLabel>–°—Ç–∞—Ç—É—Å</InputLabel>
            <Select
              value={status}
              label="–°—Ç–∞—Ç—É—Å"
              onChange={(e) => setStatus(e.target.value)}
            >
              <MenuItem value="–≤—Å–µ">–í—Å–µ</MenuItem>
              <MenuItem value="–∞–∫—Ç–∏–≤–Ω—ã–µ">–ê–∫—Ç–∏–≤–Ω—ã–µ</MenuItem>
              <MenuItem value="–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</MenuItem>
              <MenuItem value="–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} md={2}>
          <Button
            fullWidth
            variant="contained"
            onClick={loadUsers}
            sx={{ height: '56px' }}
          >
            –ù–∞–π—Ç–∏
          </Button>
        </Grid>
      </Grid>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={users}
          columns={columns}
          loading={loading}
          pageSizeOptions={[25, 50, 100]}
          initialState={{
            pagination: { paginationModel: { pageSize: 25 } },
          }}
          disableRowSelectionOnClick
        />
      </Box>

      {/* –î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <Dialog
        open={userDetailOpen}
        onClose={() => setUserDetailOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</DialogTitle>
        <DialogContent>
          {selectedUser && (
            <Box>
              <Typography variant="h6" gutterBottom>
                –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </Typography>
              <Grid container spacing={2} sx={{ mb: 2 }}>
                <Grid item xs={6}>
                  <Typography><strong>–ò–º—è:</strong> {selectedUser.–∏–º—è}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography><strong>Username:</strong> {selectedUser.username || '–ù–µ—Ç'}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography><strong>Telegram ID:</strong> {selectedUser.telegramId}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography><strong>–ë–∞–ª–∞–Ω—Å:</strong> {selectedUser.–±–∞–ª–∞–Ω—Å} ‚≠ê</Typography>
                </Grid>
              </Grid>
              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={4}>
                  <Typography><strong>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</strong> {selectedUser.—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤}</Typography>
                </Grid>
                <Grid item xs={4}>
                  <Typography><strong>–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong> {selectedUser.–∑–∞–¥–∞–Ω–∏–π–í—ã–ø–æ–ª–Ω–µ–Ω–æ}</Typography>
                </Grid>
                <Grid item xs={4}>
                  <Typography><strong>ÔøΩÔøΩ–∏—Ç–æ–º—Ü–µ–≤:</strong> {selectedUser.–ø–∏—Ç–æ–º—Ü–µ–≤}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography><strong>–ö–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ:</strong> {selectedUser.–∫–µ–π—Å–æ–≤–û—Ç–∫—Ä—ã—Ç–æ}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography><strong>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</strong> {selectedUser.–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ–†–µ—Ñ–µ—Ä–∞–ª—ã}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong>
                    {selectedUser.–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ? ' –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : selectedUser.–∞–∫—Ç–∏–≤–µ–Ω ? ' –ê–∫—Ç–∏–≤–µ–Ω' : ' –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography>
                    <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫:</strong>
                    {selectedUser.–ø–æ—Å–ª–µ–¥–Ω–∏–π–ö–ª–∏–∫
                      ? new Date(selectedUser.–ø–æ—Å–ª–µ–¥–Ω–∏–π–ö–ª–∏–∫).toLocaleDateString('ru-RU')
                      : ' –ù–∏–∫–æ–≥–¥–∞'}
                  </Typography>
                </Grid>
              </Grid>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setUserDetailOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ */}
      <Dialog
        open={balanceDialogOpen}
        onClose={() => setBalanceDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–°—É–º–º–∞"
              type="number"
              value={balanceAmount}
              onChange={(e) => setBalanceAmount(e.target.value)}
              sx={{ mb: 2 }}
            />
            <FormControl fullWidth>
              <InputLabel>–û–ø–µ—Ä–∞—Ü–∏—è</InputLabel>
              <Select
                value={balanceOperation}
                label="–û–ø–µ—Ä–∞—Ü–∏—è"
                onChange={(e) => setBalanceOperation(e.target.value)}
              >
                <MenuItem value="–¥–æ–±–∞–≤–∏—Ç—å">–î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É</MenuItem>
                <MenuItem value="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å</MenuItem>
              </Select>
            </FormControl>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setBalanceDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            onClick={handleBalanceUpdate}
            variant="contained"
            disabled={!balanceAmount}
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Users
