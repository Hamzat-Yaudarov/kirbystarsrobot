import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

export async function createDefaultAdmin() {
  try {
    const existingAdmin = await prisma.admin.findFirst({
      where: { username: process.env.ADMIN_USERNAME || 'admin' }
    });

    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD || 'admin123', 10);
      
      await prisma.admin.create({
        data: {
          username: process.env.ADMIN_USERNAME || 'admin',
          password: hashedPassword,
          role: 'admin'
        }
      });
      
      console.log('‚úÖ Default admin created');
    }
  } catch (error) {
    console.error('‚ùå Error creating default admin:', error);
  }
}

export async function createDefaultPets() {
  try {
    const existingPets = await prisma.pet.count();
    
    if (existingPets === 0) {
      const defaultPets = [
        {
          name: '–ö–æ—Ç–∏–∫-–ö–ª–∏–∫–µ—Ä',
          description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–∫–æ–≤ –Ω–∞ 0.05 –∑–≤–µ–∑–¥',
          price: 50,
          boostType: 'click',
          boostValue: 0.05
        },
        {
          name: '–°–æ–±–∞–∫–∞-–†–µ—Ñ–µ—Ä–µ–Ω—Ç',
          description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1 —É—Ä–æ–≤–Ω—è –Ω–∞ 1 –∑–≤–µ–∑–¥—É',
          price: 100,
          boostType: 'referral1',
          boostValue: 1
        },
        {
          name: '–•–æ–º—è–∫-–ü–æ–º–æ—â–Ω–∏–∫',
          description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ 0.5 –∑–≤–µ–∑–¥',
          price: 75,
          boostType: 'task',
          boostValue: 0.5
        },
        {
          name: '–ü–æ–ø—É–≥–∞–π-–ü—Ä–æ–º–æ—É—Ç–µ—Ä',
          description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2 —É—Ä–æ–≤–Ω—è –Ω–∞ 0.02 –∑–≤–µ–∑–¥—ã',
          price: 150,
          boostType: 'referral2',
          boostValue: 0.02
        }
      ];

      for (const pet of defaultPets) {
        await prisma.pet.create({ data: pet });
      }
      
      console.log('‚úÖ Default pets created');
    }
  } catch (error) {
    console.error('‚ùå Error creating default pets:', error);
  }
}

export async function createDefaultBroadcasts() {
  try {
    const existingBroadcasts = await prisma.broadcast.count();
    
    if (existingBroadcasts === 0) {
      const defaultBroadcasts = [
        {
          title: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥',
          content: 'üèÜ –ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã!\n\nü•á ‚Ññ1 - 100 –∑–≤–µ–∑–¥\nü•à ‚Ññ2 - 75 –∑–≤–µ–∑–¥\nü•â ‚Ññ3 - 50 –∑–≤–µ–∑–¥\nüèÖ ‚Ññ4 - 25 –∑–≤–µ–∑–¥\nüéñ ‚Ññ5 - 15 –∑–≤–µ–∑–¥\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–±–µ–∂–¥–∞–π!',
          buttons: JSON.stringify([
            [{ text: 'üìä –†–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings' }],
            [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'get_stars' }]
          ])
        },
        {
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          content: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars!\n\nüí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã:\n‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–µ–≤\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö\n\n–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
          buttons: JSON.stringify([
            [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
            [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }]
          ])
        }
      ];

      for (const broadcast of defaultBroadcasts) {
        await prisma.broadcast.create({ data: broadcast });
      }
      
      console.log('‚úÖ Default broadcasts created');
    }
  } catch (error) {
    console.error('‚ùå Error creating default broadcasts:', error);
  }
}
