import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handleCases(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id },
      include: {
        referrals: true
      }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Check if user invited 3+ friends today
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayReferrals = await prisma.user.count({
      where: {
        referrerId: user.id,
        createdAt: {
          gte: today
        }
      }
    });

    // Check if user already opened case today
    const hasOpenedCaseToday = user.lastCaseDate && user.lastCaseDate >= today;

    if (todayReferrals < 3) {
      const casesText = `üì¶ –ö–µ–π—Å—ã

‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞

üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3+ –¥—Ä—É–∑–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å

üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayReferrals}/3

üåü –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â—ë ${3 - todayReferrals} –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'get_stars' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await ctx.editMessageText(casesText, { reply_markup: keyboard });
      return;
    }

    if (hasOpenedCaseToday) {
      const casesText = `üì¶ –ö–µ–π—Å—ã

‚è∞ –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!

üìÖ –°–ª–µ–¥—É—é—â–∏–π –∫–µ–π—Å: –∑–∞–≤—Ç—Ä–∞
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayReferrals}/3 ‚úÖ

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'get_stars' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await ctx.editMessageText(casesText, { reply_markup: keyboard });
      return;
    }

    // User can open case
    const casesText = `üì¶ –ö–µ–π—Å—ã

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!

üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayReferrals}/3 ‚úÖ

üéÅ –í –∫–µ–π—Å–µ –º–æ–≥—É—Ç –±—ã—Ç—å:
‚Ä¢ 1-10 ‚≠ê (–æ–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞)
‚Ä¢ 15-25 ‚≠ê (—Ä–µ–¥–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞)
‚Ä¢ 50-100 ‚≠ê (—ç–ø–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞)

–ì–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å?`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!', callback_data: 'open_case' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(casesText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in handleCases:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤');
  }
}

// Handle case opening
export async function handleOpenCase(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Check if user already opened case today
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (user.lastCaseDate && user.lastCaseDate >= today) {
      await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!');
      return;
    }

    // Generate random reward
    const random = Math.random();
    let reward: number;
    let rarity: string;

    if (random < 0.7) { // 70% - –æ–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
      reward = Math.floor(Math.random() * 10) + 1; // 1-10
      rarity = '‚ö™ –û–±—ã—á–Ω–∞—è';
    } else if (random < 0.95) { // 25% - —Ä–µ–¥–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞
      reward = Math.floor(Math.random() * 11) + 15; // 15-25
      rarity = 'üîµ –†–µ–¥–∫–∞—è';
    } else { // 5% - —ç–ø–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞
      reward = Math.floor(Math.random() * 51) + 50; // 50-100
      rarity = 'üü£ –≠–ø–∏—á–µ—Å–∫–∞—è';
    }

    // Update user
    await prisma.user.update({
      where: { id: user.id },
      data: {
        balance: { increment: reward },
        casesOpened: { increment: 1 },
        lastCaseDate: new Date()
      }
    });

    const resultText = `üéÅ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!

${rarity} –Ω–∞–≥—Ä–∞–¥–∞!
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${reward} ‚≠ê

üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${(user.balance + reward).toFixed(2)} ‚≠ê

üéâ –í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${user.casesOpened + 1}

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –µ—â—ë –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'get_stars' }],
        [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(resultText, { reply_markup: keyboard });
    await ctx.answerCbQuery(`üéâ –ü–æ–ª—É—á–µ–Ω–æ ${reward} ‚≠ê!`);
  } catch (error) {
    console.error('Error in handleOpenCase:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
  }
}
