import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handleProfile(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    // Get user with relations
    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id },
      include: {
        referrals: true,
        pets: {
          include: {
            pet: true
          }
        },
        _count: {
          select: {
            referrals: true
          }
        }
      }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Count second level referrals
    const secondLevelReferrals = await prisma.user.count({
      where: {
        referrerId: {
          in: user.referrals.map(ref => ref.id)
        }
      }
    });

    // Calculate boosts from pets
    let clickBoost = 0;
    let referral1Boost = 0;
    let referral2Boost = 0;
    let taskBoost = 0;

    user.pets.forEach(userPet => {
      const pet = userPet.pet;
      const boost = pet.boostValue * userPet.level;
      
      switch (pet.boostType) {
        case 'click':
          clickBoost += boost;
          break;
        case 'referral1':
          referral1Boost += boost;
          break;
        case 'referral2':
          referral2Boost += boost;
          break;
        case 'task':
          taskBoost += boost;
          break;
      }
    });

    const profileText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:
‚îú 1 —É—Ä–æ–≤–µ–Ω—å: ${user._count.referrals} —á–µ–ª.
‚îî 2 —É—Ä–æ–≤–µ–Ω—å: ${secondLevelReferrals} —á–µ–ª.

üêæ –ü–∏—Ç–æ–º—Ü—ã: ${user.pets.length}

üöÄ –ë—É—Å—Ç—ã –æ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤:
‚îú –ö–ª–∏–∫–∏: +${clickBoost.toFixed(2)} ‚≠ê
‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã 1 —É—Ä.: +${referral1Boost.toFixed(2)} ‚≠ê
‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã 2 —É—Ä.: +${referral2Boost.toFixed(3)} ‚≠ê
‚îî –ó–∞–¥–∞–Ω–∏—è: +${taskBoost.toFixed(2)} ‚≠ê

üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/${ctx.botInfo?.username}?start=${user.referralCode}`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'profile' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(profileText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in handleProfile:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}
