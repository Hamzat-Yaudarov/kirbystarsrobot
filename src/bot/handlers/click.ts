import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handleClick(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id },
      include: {
        pets: {
          include: {
            pet: true
          }
        }
      }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Check if user already clicked today
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (user.lastClick && user.lastClick >= today) {
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      const hoursLeft = Math.ceil((tomorrow.getTime() - Date.now()) / (1000 * 60 * 60));
      
      await ctx.answerCbQuery(`‚è∞ –í—ã —É–∂–µ –∫–ª–∏–∫–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
      return;
    }

    // Calculate base reward + pet boost
    let baseReward = 0.1;
    let clickBoost = 0;

    user.pets.forEach(userPet => {
      if (userPet.pet.boostType === 'click') {
        clickBoost += userPet.pet.boostValue * userPet.level;
      }
    });

    const totalReward = baseReward + clickBoost;

    // Update user
    await prisma.user.update({
      where: { id: user.id },
      data: {
        balance: { increment: totalReward },
        lastClick: new Date()
      }
    });

    const rewardText = `üéâ –£—Å–ø–µ—à–Ω–æ!

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${totalReward.toFixed(3)} ‚≠ê
${clickBoost > 0 ? `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${baseReward} ‚≠ê\n‚îî –ë—É—Å—Ç –ø–∏—Ç–æ–º—Ü–µ–≤: +${clickBoost.toFixed(3)} ‚≠ê` : ''}

üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${(user.balance + totalReward).toFixed(3)} ‚≠ê

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫: –∑–∞–≤—Ç—Ä–∞`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(rewardText, { reply_markup: keyboard });
    await ctx.answerCbQuery('ÔøΩÔøΩ –ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!');
  } catch (error) {
    console.error('Error in handleClick:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ');
  }
}
