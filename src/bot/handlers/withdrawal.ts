import { PrismaClient } from '@prisma/client';
import { BotContext, WITHDRAWAL_OPTIONS } from '../types';

const prisma = new PrismaClient();

export async function handleWithdrawal(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const action = ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : 'withdrawal';

  if (action === 'withdrawal') {
    await showWithdrawalOptions(ctx);
  } else if (action.startsWith('withdraw_')) {
    const amount = parseInt(action.replace('withdraw_', ''));
    await processWithdrawal(ctx, amount);
  }
}

async function showWithdrawalOptions(ctx: BotContext) {
  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user!.id }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const withdrawalText = `üí∏ –í—ã–≤ÔøΩÔøΩ–¥ –∑–≤—ë–∑–¥

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞:

‚Ä¢ 15 ‚≠ê ‚Üí 15 Telegram Stars
‚Ä¢ 25 ‚≠ê ‚Üí 25 Telegram Stars  
‚Ä¢ 50 ‚≠ê ‚Üí 50 Telegram Stars
‚Ä¢ 100 ‚≠ê ‚Üí 100 Telegram Stars
‚Ä¢ 1300 ‚≠ê ‚Üí Telegram Premium (3 –º–µ—Å—è—Ü–∞)

‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:
‚Ä¢ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;

    const keyboard = {
      inline_keyboard: [
        ...WITHDRAWAL_OPTIONS.map(option => {
          const canWithdraw = user.balance >= option.cost;
          return [{
            text: `${option.label} ${canWithdraw ? '‚úÖ' : '‚ùå'}`,
            callback_data: canWithdraw ? `withdraw_${option.amount}` : 'insufficient_balance'
          }];
        }),
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(withdrawalText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showWithdrawalOptions:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–≤–æ–¥–∞');
  }
}

async function processWithdrawal(ctx: BotContext, amount: number) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const option = WITHDRAWAL_OPTIONS.find(opt => opt.amount === amount);
    if (!option) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞');
      return;
    }

    if (user.balance < option.cost) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥');
      return;
    }

    // Check for pending withdrawals
    const pendingWithdrawal = await prisma.withdrawal.findFirst({
      where: {
        userId: user.id,
        status: 'pending'
      }
    });

    if (pendingWithdrawal) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥');
      return;
    }

    // Create withdrawal request
    const withdrawal = await prisma.$transaction([
      prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { decrement: option.cost }
        }
      }),
      prisma.withdrawal.create({
        data: {
          userId: user.id,
          amount: option.amount,
          type: amount === 1300 ? 'premium' : amount.toString(),
          status: 'pending'
        }
      })
    ]);

    // Send notification to withdrawal channel
    await sendWithdrawalNotification(ctx, user, withdrawal[1], option);

    const successText = `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!

üí∞ –°—É–º–º–∞: ${option.label}
üìã ID –∑–∞—è–≤–∫–∏: ${withdrawal[1].id.slice(-8)}
‚è∞ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏

üí´ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${(user.balance - option.cost).toFixed(2)} ‚≠ê

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(successText, { reply_markup: keyboard });
    await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
  } catch (error) {
    console.error('Error in processWithdrawal:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
  }
}

async function sendWithdrawalNotification(ctx: BotContext, user: any, withdrawal: any, option: any) {
  try {
    const notificationText = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
üì± Username: ${user.username ? '@' + user.username : '–ù–µ—Ç'}
üÜî ID: \`${user.telegramId}\`
üîó –ü—Ä–æ—Ñ–∏–ª—å: [–û—Ç–∫—Ä—ã—Ç—å](tg://user?id=${user.telegramId})

üí∞ –°—É–º–º–∞: ${option.label}
üìã ID –∑–∞—è–≤–∫–∏: ${withdrawal.id.slice(-8)}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –°–¥–µ–ª–∞–Ω–æ', callback_data: `approve_${withdrawal.id}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${withdrawal.id}` }
        ]
      ]
    };

    await ctx.telegram.sendMessage(
      process.env.WITHDRAWAL_CHAT_ID || '@kirbyvivodstars',
      notificationText,
      {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
  } catch (error) {
    console.error('Error sending withdrawal notification:', error);
  }
}

// Handle withdrawal administration
export async function handleWithdrawalAction(ctx: any, action: string, withdrawalId: string) {
  try {
    const withdrawal = await prisma.withdrawal.findUnique({
      where: { id: withdrawalId },
      include: { user: true }
    });

    if (!withdrawal) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (withdrawal.status !== 'pending') {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      return;
    }

    if (action === 'approve') {
      await prisma.withdrawal.update({
        where: { id: withdrawalId },
        data: {
          status: 'approved',
          processedAt: new Date()
        }
      });

      // Notify user
      await ctx.telegram.sendMessage(
        withdrawal.user.telegramId,
        `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\nüí∞ –°—É–º–º–∞: ${withdrawal.amount} ‚≠ê\nüìã ID: ${withdrawal.id.slice(-8)}\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`
      );

      await ctx.editMessageText(
        ctx.callbackQuery.message.text + '\n\n‚úÖ –û–î–û–ë–†–ï–ù–û'
      );
      await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');

    } else if (action === 'reject') {
      // Return stars to user
      await prisma.$transaction([
        prisma.withdrawal.update({
          where: { id: withdrawalId },
          data: {
            status: 'rejected',
            processedAt: new Date(),
            reason: '–û—Ç–∫–ªÔøΩÔøΩ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
          }
        }),
        prisma.user.update({
          where: { id: withdrawal.userId },
          data: {
            balance: { increment: withdrawal.amount }
          }
        })
      ]);

      // Notify user
      await ctx.telegram.sendMessage(
        withdrawal.user.telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\nüí∞ –°—É–º–º–∞: ${withdrawal.amount} ‚≠ê\nüìã ID: ${withdrawal.id.slice(-8)}\n\nüí´ –ó–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.`
      );

      await ctx.editMessageText(
        ctx.callbackQuery.message.text + '\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'
      );
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    }
  } catch (error) {
    console.error('Error in handleWithdrawalAction:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏');
  }
}

export { showWithdrawalOptions, processWithdrawal, sendWithdrawalNotification };
