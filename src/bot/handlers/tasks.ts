import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handleTasks(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    // Get next available task for user
    const completedTaskIds = await prisma.userTask.findMany({
      where: { userId: ctx.user.id },
      select: { taskId: true }
    });

    const completedIds = completedTaskIds.map(ut => ut.taskId);

    const nextTask = await prisma.task.findFirst({
      where: {
        isActive: true,
        id: {
          notIn: completedIds
        }
      },
      orderBy: { order: 'asc' }
    });

    if (!nextTask) {
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await ctx.editMessageText(
        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ - —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è.',
        { reply_markup: keyboard }
      );
      return;
    }

    const taskText = `üìã –ó–∞–¥–∞–Ω–∏–µ

üìù ${nextTask.title}

üìÑ ${nextTask.description}

üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${nextTask.reward} ‚≠ê

–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏', url: nextTask.link }],
        [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `check_task_${nextTask.id}` }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    // Task checking is handled in bot.ts via action handlers

    await ctx.editMessageText(taskText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in handleTasks:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function checkTask(ctx: any, taskId: string) {
  if (!ctx.from) return;

  const user = await prisma.user.findUnique({
    where: { telegramId: ctx.from.id.toString() },
    include: {
      pets: {
        include: { pet: true }
      }
    }
  });

  if (!user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const task = await prisma.task.findUnique({
      where: { id: taskId }
    });

    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // Check if task already completed
    const existingCompletion = await prisma.userTask.findUnique({
      where: {
        userId_taskId: {
          userId: user.id,
          taskId: task.id
        }
      }
    });

    if (existingCompletion) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      return;
    }

    // For channels/chats, verify subscription
    if (task.chatId && (task.type === 'channel' || task.type === 'chat')) {
      try {
        const member = await ctx.telegram.getChatMember(task.chatId, ctx.from.id);
        if (!['creator', 'administrator', 'member'].includes(member.status)) {
          await ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
          return;
        }
      } catch (error) {
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
        return;
      }
    }

    // Calculate reward with pet boost
    let baseReward = task.reward;
    let taskBoost = 0;

    user.pets.forEach(userPet => {
      if (userPet.pet.boostType === 'task') {
        taskBoost += userPet.pet.boostValue * userPet.level;
      }
    });

    const totalReward = baseReward + taskBoost;

    // Mark task as completed and give reward
    await prisma.$transaction([
      prisma.userTask.create({
        data: {
          userId: user.id,
          taskId: task.id,
          completed: true,
          claimedAt: new Date()
        }
      }),
      prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { increment: totalReward }
        }
      })
    ]);

    const successText = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${totalReward.toFixed(2)} ‚≠ê
${taskBoost > 0 ? `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${baseReward} ‚≠ê\n‚îî –ë—É—Å—Ç –ø–∏—Ç–æ–º—Ü–µ–≤: +${taskBoost.toFixed(2)} ‚≠ê` : ''}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'tasks' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(successText, { reply_markup: keyboard });
    await ctx.answerCbQuery('üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
  } catch (error) {
    console.error('Error checking task:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è');
  }
}

// Register callback handler
export { checkTask };
