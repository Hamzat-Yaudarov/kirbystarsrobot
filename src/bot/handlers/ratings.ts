import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handleRatings(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    // Get weekly referral rating
    const topUsers = await prisma.user.findMany({
      where: {
        weeklyReferrals: {
          gt: 0
        }
      },
      orderBy: {
        weeklyReferrals: 'desc'
      },
      take: 10,
      select: {
        id: true,
        firstName: true,
        username: true,
        weeklyReferrals: true
      }
    });

    // Find current user position
    const allUsers = await prisma.user.findMany({
      where: {
        weeklyReferrals: {
          gt: 0
        }
      },
      orderBy: {
        weeklyReferrals: 'desc'
      },
      select: {
        id: true,
        weeklyReferrals: true
      }
    });

    const userPosition = allUsers.findIndex(user => user.id === ctx.user!.id) + 1;
    const userWeeklyReferrals = ctx.user.weeklyReferrals || 0;

    let ratingsText = `üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é

üèÜ –ü—Ä–∏–∑—ã –∑–∞ —Ç–æ–ø-5:
ü•á ‚Ññ1 - 100 ‚≠ê
ü•à ‚Ññ2 - 75 ‚≠ê  
ü•â ‚Ññ3 - 50 ‚≠ê
üèÖ ‚Ññ4 - 25 ‚≠ê
üéñ ‚Ññ5 - 15 ‚≠ê

üìà –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n`;

    if (topUsers.length === 0) {
      ratingsText += '\n‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ';
    } else {
      topUsers.forEach((user, index) => {
        const position = index + 1;
        const emoji = position <= 3 ? ['ü•á', 'ü•à', 'ü•â'][position - 1] : `${position}.`;
        const name = user.firstName || user.username || '–ê–Ω–æ–Ω–∏–º';
        ratingsText += `\n${emoji} ${name} - ${user.weeklyReferrals} —Ä–µ—Ñ.`;
      });
    }

    if (userPosition > 0) {
      ratingsText += `\n\nüë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: ‚Ññ${userPosition}`;
      ratingsText += `\nüë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${userWeeklyReferrals}`;
    } else {
      ratingsText += `\n\nüë§ –í—ã –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ`;
      ratingsText += `\nüí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!`;
    }

    ratingsText += `\n\n‚è∞ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'ratings' }],
        [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'get_stars' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(ratingsText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in handleRatings:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}
