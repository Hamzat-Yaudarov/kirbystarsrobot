import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handlePets(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const action = ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : 'pets';

  if (action === 'pets' || action === 'pets_list') {
    await showPetsList(ctx);
  } else if (action === 'my_pets') {
    await showMyPets(ctx);
  } else if (action.startsWith('buy_pet_')) {
    const petId = action.replace('buy_pet_', '');
    await buyPet(ctx, petId);
  } else if (action.startsWith('pet_info_')) {
    const petId = action.replace('pet_info_', '');
    await showPetInfo(ctx, petId);
  } else if (action.startsWith('upgrade_pet_')) {
    const userPetId = action.replace('upgrade_pet_', '');
    await upgradePet(ctx, userPetId);
  }
}

async function showPetsList(ctx: BotContext) {
  try {
    const pets = await prisma.pet.findMany({
      where: { isActive: true },
      orderBy: { price: 'asc' }
    });

    if (pets.length === 0) {
      const noPetsText = `üêæ –ü–∏—Ç–æ–º—Ü—ã

‚ùå –ü–∏—Ç–æ–º—Ü—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await ctx.editMessageText(noPetsText, { reply_markup: keyboard });
      return;
    }

    const petsText = `üêæ –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤

üí° –ü–∏—Ç–æ–º—Ü—ã –¥–∞—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±—É—Å—Ç—ã –∫ –¥–æ—Ö–æ–¥—É!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:`;

    const keyboard = {
      inline_keyboard: [
        ...pets.map(pet => ([{
          text: `${pet.name} - ${pet.price} ‚≠ê`,
          callback_data: `pet_info_${pet.id}`
        }])),
        [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'my_pets' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(petsText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showPetsList:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤');
  }
}

async function showPetInfo(ctx: BotContext, petId: string) {
  try {
    const pet = await prisma.pet.findUnique({
      where: { id: petId }
    });

    if (!pet) {
      await ctx.answerCbQuery('‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const user = await prisma.user.findUnique({
      where: { id: ctx.user!.id }
    });

    const boostTypeText = {
      'click': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∫–ª–∏–∫–æ–≤',
      'referral1': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1 —É—Ä–æ–≤–Ω—è',
      'referral2': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2 —É—Ä–æ–≤–Ω—è',
      'task': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∑–∞–¥–∞–Ω–∏–π'
    };

    const petText = `üêæ ${pet.name}

üìÑ ${pet.description}

üí∞ –¶–µ–Ω–∞: ${pet.price} ‚≠ê
üöÄ –ë—É—Å—Ç: ${boostTypeText[pet.boostType as keyof typeof boostTypeText]}
üìà –ó–Ω–∞—á–µ–Ω–∏–µ: +${pet.boostValue} ‚≠ê

üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.balance.toFixed(2)} ‚≠ê`;

    const canBuy = user && user.balance >= pet.price;
    const hasAlready = await prisma.userPet.findUnique({
      where: {
        userId_petId: {
          userId: ctx.user!.id,
          petId: pet.id
        }
      }
    });

    const keyboard = {
      inline_keyboard: [
        ...(canBuy && !hasAlready ? [[{ text: 'üí∞ –ö—É–ø–∏—Ç—å', callback_data: `buy_pet_${pet.id}` }]] : []),
        ...(hasAlready ? [[{ text: '‚úÖ –£–∂–µ –∫—É–ø–ª–µ–Ω', callback_data: 'my_pets' }]] : []),
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pets_list' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(petText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showPetInfo:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–æ–º—Ü–µ');
  }
}

async function buyPet(ctx: BotContext, petId: string) {
  try {
    const user = await prisma.user.findUnique({
      where: { id: ctx.user!.id }
    });

    const pet = await prisma.pet.findUnique({
      where: { id: petId }
    });

    if (!user || !pet) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    if (user.balance < pet.price) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥');
      return;
    }

    const hasAlready = await prisma.userPet.findUnique({
      where: {
        userId_petId: {
          userId: user.id,
          petId: pet.id
        }
      }
    });

    if (hasAlready) {
      await ctx.answerCbQuery('‚ùå –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –∫—É–ø–ª–µ–Ω');
      return;
    }

    // Buy pet
    await prisma.$transaction([
      prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { decrement: pet.price }
        }
      }),
      prisma.userPet.create({
        data: {
          userId: user.id,
          petId: pet.id,
          level: 1
        }
      })
    ]);

    const successText = `üéâ –ü–∏—Ç–æ–º–µ—Ü –∫—É–ø–ª–µ–Ω!

üêæ ${pet.name}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${pet.price} ‚≠ê
üí´ –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - pet.price).toFixed(2)} ‚≠ê

–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –¥–∞—ë—Ç –±—É—Å—Ç –∫ –≤–∞—à–µ–º—É –¥–æ—Ö–æ–¥—É!`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'my_pets' }],
        [{ text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'pets_list' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(successText, { reply_markup: keyboard });
    await ctx.answerCbQuery('üéâ –ü–∏—Ç–æ–º–µ—Ü –∫—É–ø–ª–µ–Ω!');
  } catch (error) {
    console.error('Error in buyPet:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ç–æ–º—Ü–∞');
  }
}

async function showMyPets(ctx: BotContext) {
  try {
    const userPets = await prisma.userPet.findMany({
      where: { userId: ctx.user!.id },
      include: { pet: true },
      orderBy: { createdAt: 'asc' }
    });

    if (userPets.length === 0) {
      const noPetsText = `üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã

‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤

–ö—É–ø–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data: 'pets_list' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await ctx.editMessageText(noPetsText, { reply_markup: keyboard });
      return;
    }

    let totalBoosts = {
      click: 0,
      referral1: 0,
      referral2: 0,
      task: 0
    };

    userPets.forEach(userPet => {
      const boost = userPet.pet.boostValue * userPet.level;
      totalBoosts[userPet.pet.boostType as keyof typeof totalBoosts] += boost;
    });

    const myPetsText = `üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (${userPets.length})

üìä –û–±—â–∏–µ –±—É—Å—Ç—ã:
‚îú –ö–ª–∏–∫–∏: +${totalBoosts.click.toFixed(3)} ‚≠ê
‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã 1 —É—Ä.: +${totalBoosts.referral1.toFixed(2)} ‚≠ê
‚îú –†–µ—Ñ–µ—Ä–∞ÔøΩÔøΩ—ã 2 —É—Ä.: +${totalBoosts.referral2.toFixed(3)} ‚≠ê
‚îî –ó–∞–¥–∞–Ω–∏—è: +${totalBoosts.task.toFixed(2)} ‚≠ê

–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:`;

    const keyboard = {
      inline_keyboard: [
        ...userPets.map(userPet => ([{
          text: `${userPet.pet.name} (—É—Ä.${userPet.level})`,
          callback_data: `upgrade_pet_${userPet.id}`
        }])),
        [{ text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'pets_list' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(myPetsText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showMyPets:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤');
  }
}

async function upgradePet(ctx: BotContext, userPetId: string) {
  try {
    const userPet = await prisma.userPet.findUnique({
      where: { id: userPetId },
      include: { pet: true }
    });

    if (!userPet || userPet.userId !== ctx.user!.id) {
      await ctx.answerCbQuery('‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const upgradeCost = userPet.pet.price * userPet.level; // Cost increases with level
    const currentBoost = userPet.pet.boostValue * userPet.level;
    const nextBoost = userPet.pet.boostValue * (userPet.level + 1);

    const user = await prisma.user.findUnique({
      where: { id: ctx.user!.id }
    });

    const upgradeText = `üêæ ${userPet.pet.name}

üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${userPet.level}
üöÄ –¢–µ–∫—É—â–∏–π –±—É—Å—Ç: +${currentBoost.toFixed(3)} ‚≠ê
‚¨ÜÔ∏è –ë—É—Å—Ç –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: +${nextBoost.toFixed(3)} ‚≠ê

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${upgradeCost} ‚≠ê
üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.balance.toFixed(2)} ‚≠ê

${user && user.balance >= upgradeCost ? '‚úÖ –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å!' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥'}`;

    const canUpgrade = user && user.balance >= upgradeCost;

    const keyboard = {
      inline_keyboard: [
        ...(canUpgrade ? [[{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å', callback_data: `confirm_upgrade_${userPetId}` }]] : []),
        [{ text: '‚¨ÖÔ∏è –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'my_pets' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(upgradeText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in upgradePet:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–æ–º—Ü–µ');
  }
}

// Export all handlers
export { showPetsList, showPetInfo, buyPet, showMyPets, upgradePet };
