import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function handlePromocode(ctx: BotContext) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const promocodeText = `üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã

üí° –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /promo CODE
2. –ó–∞–º–µ–Ω–∏—Ç–µ CODE –Ω–∞ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥
3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!

üí∞ –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /promo WELCOME
‚Ä¢ /promo BONUS100
‚Ä¢ /promo STARS2024

üîç –ò—â–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏ —É –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤!`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  try {
    await ctx.editMessageText(promocodeText, { reply_markup: keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in handlePromocode:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  }
}

export async function handlePromoCommand(ctx: BotContext, code: string) {
  if (!ctx.user || !code) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /promo CODE');
    return;
  }

  try {
    const promocode = await prisma.promocode.findUnique({
      where: { 
        code: code.toUpperCase(),
      },
      include: {
        usedBy: {
          where: {
            userId: ctx.user.id
          }
        }
      }
    });

    if (!promocode) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return;
    }

    if (!promocode.isActive) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    if (promocode.usedBy.length > 0) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥');
      return;
    }

    if (promocode.usageLimit && promocode.usedCount >= promocode.usageLimit) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω');
      return;
    }

    // Use promocode
    await prisma.$transaction([
      prisma.user.update({
        where: { id: ctx.user.id },
        data: {
          balance: { increment: promocode.reward }
        }
      }),
      prisma.promocode.update({
        where: { id: promocode.id },
        data: {
          usedCount: { increment: 1 }
        }
      }),
      prisma.userPromocode.create({
        data: {
          userId: ctx.user.id,
          promocodeId: promocode.id
        }
      })
    ]);

    const user = await prisma.user.findUnique({
      where: { id: ctx.user.id }
    });

    const successText = `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

üé´ –ö–æ–¥: ${promocode.code}
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${promocode.reward} ‚≠ê
üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user?.balance.toFixed(2)} ‚≠ê

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!`;

    await ctx.reply(successText);
  } catch (error) {
    console.error('Error in handlePromoCommand:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
}
