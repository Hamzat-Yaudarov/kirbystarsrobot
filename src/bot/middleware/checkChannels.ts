import { PrismaClient } from '@prisma/client';
import { BotContext } from '../types';

const prisma = new PrismaClient();

export async function checkMandatoryChannels(ctx: BotContext, next: () => Promise<void>) {
  if (!ctx.user) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const requiredChannels = await prisma.requiredChannel.findMany({
      where: { isActive: true }
    });

    if (requiredChannels.length === 0) {
      return next();
    }

    for (const channel of requiredChannels) {
      try {
        const member = await ctx.telegram.getChatMember(channel.chatId, parseInt(ctx.user.telegramId));
        
        if (!['creator', 'administrator', 'member'].includes(member.status)) {
          const keyboard = {
            inline_keyboard: [
              ...requiredChannels.map(ch => ([{
                text: `üì¢ ${ch.title}`,
                url: ch.link || `https://t.me/${ch.chatId.replace('@', '')}`
              }])),
              [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: ctx.callbackQuery?.data || 'profile' }]
            ]
          };

          await ctx.editMessageText(
            '‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:',
            { reply_markup: keyboard }
          );
          await ctx.answerCbQuery('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!');
          return;
        }
      } catch (error) {
        console.error(`Error checking channel ${channel.chatId}:`, error);
        // If we can't check the channel, allow access
        continue;
      }
    }

    return next();
  } catch (error) {
    console.error('Error in checkMandatoryChannels:', error);
    return next();
  }
}
